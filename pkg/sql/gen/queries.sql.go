// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.15.0
// source: queries.sql

package gensql

import (
	"context"
	"encoding/json"

	"github.com/google/uuid"
)

const createPlan = `-- name: CreatePlan :exec
INSERT INTO beredskapsvakt
    ("id", "ident", "plan")
VALUES ($1, $2, $3)
`

type CreatePlanParams struct {
	ID    uuid.UUID
	Ident string
	Plan  json.RawMessage
}

func (q *Queries) CreatePlan(ctx context.Context, arg CreatePlanParams) error {
	_, err := q.db.ExecContext(ctx, createPlan, arg.ID, arg.Ident, arg.Plan)
	return err
}

const deletePlan = `-- name: DeletePlan :exec
DELETE FROM beredskapsvakt
WHERE id = $1
`

func (q *Queries) DeletePlan(ctx context.Context, id uuid.UUID) error {
	_, err := q.db.ExecContext(ctx, deletePlan, id)
	return err
}

const listBeredskapsvakter = `-- name: ListBeredskapsvakter :many
SELECT id, ident, plan, period_begin, period_end
FROM beredskapsvakt
ORDER BY ident
`

func (q *Queries) ListBeredskapsvakter(ctx context.Context) ([]Beredskapsvakt, error) {
	rows, err := q.db.QueryContext(ctx, listBeredskapsvakter)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Beredskapsvakt
	for rows.Next() {
		var i Beredskapsvakt
		if err := rows.Scan(
			&i.ID,
			&i.Ident,
			&i.Plan,
			&i.PeriodBegin,
			&i.PeriodEnd,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}
